{"version":3,"sources":["assets/MediaPlayer.ts","assets/plugins/AutoPlay.ts","assets/plugins/AutoPause.ts","assets/index.ts"],"names":[],"mappings":";AA4CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3CA,IAAA,EAAA,WAII,SAAA,EAAY,GACH,KAAA,MAAQ,EAAO,GACf,KAAA,QAAU,EAAO,SAAW,GAC5B,KAAA,eAkCb,OA9BY,EAAA,UAAA,aAAR,WAAA,IAAA,EAAA,KACS,KAAA,QAAQ,QAAQ,SAAA,GACjB,EAAO,IAAI,MAInB,EAAA,UAAA,KAAA,WACS,KAAA,MAAM,QAGf,EAAA,UAAA,MAAA,WACS,KAAA,MAAM,SAGf,EAAA,UAAA,WAAA,WACQ,KAAK,MAAM,OACN,KAAA,OAEA,KAAA,SAIb,EAAA,UAAA,KAAA,WACS,KAAA,MAAM,OAAQ,GAGvB,EAAA,UAAA,OAAA,WACS,KAAA,MAAM,OAAQ,GAG3B,EAzCA,GA2CA,QAAA,QAAe;;AC1Bf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhBA,IAAA,EAAA,WACI,SAAA,KAYJ,OAVI,EAAA,UAAA,IAAA,SAAI,GACA,EAAO,OAOP,EAAO,QAEf,EAbA,GAgBA,QAAA,QAAe;;ACoCf,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IApDA,IAAA,EAAA,WAII,SAAA,IAES,KAAA,OAAS,KACT,KAAA,UAAY,IACZ,KAAA,mBAAqB,KAAK,mBAAmB,KAAK,MAClD,KAAA,uBAAyB,KAAK,uBAAuB,KAAK,MAyCvE,OAtCI,EAAA,UAAA,IAAA,SAAI,GACA,QAAQ,IAAI,GACP,KAAA,OAAS,EACG,IAAI,qBAAqB,KAAK,mBAAoB,CAC/D,UAAW,KAAK,YAGX,QAAQ,KAAK,OAAO,OAE7B,SAAS,iBAAiB,mBAAoB,KAAK,yBAI/C,EAAA,UAAA,mBAAR,SAA2B,GACvB,QAAQ,IAAI,MACN,IAEA,EAFQ,EAAQ,GAEE,mBAAqB,KAAK,UAElD,QAAQ,IAAI,GAER,EAEK,KAAA,OAAO,OAEP,KAAA,OAAO,SAIZ,EAAA,UAAA,uBAAR,WACmD,YAA7B,SAAS,gBAElB,KAAA,OAAO,OAEP,KAAA,OAAO,SAIxB,EAlDA,GAoDA,QAAA,QAAe;;AC5Bf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA1BA,IAAA,EAAA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,wBAEM,EAAQ,SAAS,cAAc,SAC/B,EAAS,IAAI,EAAA,QAAY,CAC3B,GAAI,EACJ,QAAS,CAAC,IAAI,EAAA,QAAY,IAAI,EAAA,WAG5B,EAA0B,SAAS,cAAc,eACvD,EAAW,QAAU,WAAM,OAAA,EAAO,cAElC,IAAM,EAA2B,SAAS,cAAc,eACxD,EAAW,QAAU,WACb,EAAO,MAAM,MACb,EAAO,SAEP,EAAO","file":"assets.ccb8f21f.js","sourceRoot":"..","sourcesContent":["\r\nclass MediaPlayer {\r\n    media: HTMLMediaElement;\r\n    plugins: Array<any>;\r\n\r\n    constructor(config) {\r\n        this.media = config.el;\r\n        this.plugins = config.plugins || []\r\n        this._initPlugins();\r\n\r\n    }\r\n\r\n    private _initPlugins() {\r\n        this.plugins.forEach(plugin => {\r\n            plugin.run(this);\r\n        }); \r\n    }\r\n\r\n    play() {\r\n        this.media.play();\r\n    }\r\n\r\n    pause() {\r\n        this.media.pause();\r\n    }\r\n\r\n    togglePlay() {\r\n        if (this.media.paused) {\r\n            this.play();\r\n        } else {\r\n            this.pause();\r\n        }\r\n\r\n    }\r\n    mute() {\r\n        this.media.muted = true;\r\n\r\n    }\r\n    unmute() {\r\n        this.media.muted = false;\r\n\r\n    }\r\n}\r\n\r\nexport default MediaPlayer;","import MediaPlayer from '../MediaPlayer';\r\n\r\nclass AutoPlay {\r\n    constructor() { }\r\n    \r\n    run(player) {\r\n        player.mute();\r\n\r\n        \r\n        // if (!player.muted) {\r\n        //     player.muted = true;\r\n\r\n        // }\r\n        player.play();\r\n    }\r\n}\r\n\r\n\r\nexport default AutoPlay;","import MediaPlayer from '../MediaPlayer';\r\n\r\nclass AutoPause {\r\nprivate threshold: number;\r\nplayer: MediaPlayer;\r\n\r\n    constructor() {\r\n\r\n        this.player = null\r\n        this.threshold = 0.25;\r\n        this.handleIntersection = this.handleIntersection.bind(this);\r\n        this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\r\n    }\r\n\r\n    run(player) {\r\n        console.log(player)\r\n        this.player = player\r\n        const observer = new IntersectionObserver(this.handleIntersection, {\r\n            threshold: this.threshold,\r\n        });\r\n\r\n        observer.observe(this.player.media);\r\n\r\n        document.addEventListener(\"visibilitychange\", this.handleVisibilityChange);\r\n\r\n    }\r\n\r\n    private handleIntersection(entries: IntersectionObserverEntry[]) {\r\n        console.log(this);\r\n        const entry = entries[0];\r\n\r\n        const isVisible = entry.intersectionRatio >= this.threshold;\r\n\r\n        console.log(isVisible);\r\n\r\n        if (isVisible) {\r\n\r\n            this.player.play();\r\n        } else {\r\n            this.player.pause();\r\n        }\r\n    }\r\n\r\n    private handleVisibilityChange() {\r\n        const isVisible = document.visibilityState === 'visible';\r\n        if (isVisible) {\r\n            this.player.play();\r\n        } else {\r\n            this.player.pause();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default AutoPause;","import MediaPlayer from './MediaPlayer';\r\nimport AutoPlay from './plugins/AutoPlay';\r\nimport AutoPause from './plugins/AutoPause';\r\n\r\nconst video = document.querySelector('video');\r\nconst player = new MediaPlayer({\r\n    el: video,\r\n    plugins: [new AutoPlay(), new AutoPause()],\r\n});\r\n\r\nconst playButton: HTMLElement = document.querySelector(\"#playButton\");\r\nplayButton.onclick = () => player.togglePlay();\r\n\r\nconst muteButton : HTMLElement = document.querySelector('#muteButton');\r\nmuteButton.onclick = () => {\r\n    if (player.media.muted) {\r\n        player.unmute();\r\n    } else {\r\n        player.mute();\r\n    }\r\n};\r\n\r\n//  if ('serviceWorker' in navegator) {\r\n//      navigator.serviceWorker.register('./sw.js').catch(error =>{\r\n//          console.log(error.message);\r\n//      })\r\n//     }\r\n"]}